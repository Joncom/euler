<?php
function getTime()
    {
    $a = explode (' ',microtime());
    return(double) $a[0] + $a[1];
    }
$Start = getTime();
?>





<?php

/**************************
/
/ The sequence of triangle numbers is generated by
/ adding the natural numbers. So the 7th triangle
/ number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
/ The first ten terms would be:
/
/ 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
/
/ Let us list the factors of the first seven
/ triangle numbers:
/
/  1: 1
/  3: 1,3
/  6: 1,2,3,6
/ 10: 1,2,5,10
/ 15: 1,3,5,15
/ 21: 1,3,7,21
/ 28: 1,2,4,7,14,28
/ We can see that 28 is the first triangle number
/ to have over five divisors.
/
/ What is the value of the first triangle number
/ to have over five hundred divisors?
/
/ Solution: ?
/ Running-time: ?
/
**************************/

set_time_limit( 60 * 60 ); // 1 hr

function getTriangleNumber( $n ) {

    $sum = 0;

    for( $i = 1; $i <= $n; $i++ ) $sum += $i;

    return $sum;

}

function getFactors( $number ) {

    $factors = array();

    $max = floor( sqrt( $number ) );

    for( $factor = 1; $factor <= $max; $factor++ ) {

        if( $number % $factor == 0 ) {

            array_push( $factors, $factor );

            // Don't add the square root twice.
            if( $factor != $number / $factor ) {

                array_push( $factors, $number / $factor );

            }

        }

    }

    return $factors;

}

echo "<pre>";

// Limit of brute force attempt.
$limit = 1000000;

// Number of divisors we are looking for.
$divisors = 500;

for( $i = 1; $i < $limit; $i++ ) {

    $triangle_number = getTriangleNumber( $i );

    $factors = getFactors( $triangle_number );

    if( count( $factors ) > $divisors ) {

        echo "Answer: $triangle_number is the first triable number "
           . "to have over $divisors divisors.";

        break;

    }

}

//print_r( getFactors( 1651654 ) );

echo "</pre>";

?>






<?php
$End = getTime();
echo "Time taken = ".number_format(($End - $Start),2)." secs";
?>